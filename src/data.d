module data;
import std.traits;

private enum arithmeticOps = ["+","-","/","*","%","&","|^","==",">","<","<=",">=",">>","<<"];

union Data2 {
    ushort u16;
    alias u16 this;
    private ubyte[2] size8;
    void opIndexAssign(ubyte value, size_t index) {
        size8[index] = value;
    }
    ubyte opIndex(size_t index) {
        return size8[index];
    }

    this(ubyte a, ubyte b) {
        size8[0] = a;
        size8[1] = b;
    }
    
    this(ushort val) {
        u16 = val;
    }
    
    this(ubyte[] a) {
        assert(a.length == 2);
        size8[0] = a[0];
        size8[1] = a[1];
    }

    this(T)(T val) if (isIntegral!T) {
        u16 = cast(ushort) val;
    }

    Data2 opBinary(string op, R)(const R rhs) const {
        import std.algorithm.searching: canFind;
        
        static if ((isIntegral!R || is(R == bool)) && (arithmeticOps.canFind(op))) {
            mixin ("return Data2(u16 "~op~" rhs);");
        } else {
            static assert(0);
        }
    }
}


// union Data1 {
//     ubyte u8;
//     byte s8;
// }

// template 
// {
class BankSet(int S) {
    ubyte[S][] bank;
    int bankIndex = 0;

    ref ubyte[S] currentBank() {
        return bank[bankIndex];
    }

    this(int banks = 1, int index = 0) {
        bank.length = banks;
        bankIndex = index;
    } 
}


struct Flag8 {
    private ubyte data;
    bool opIndex(size_t index) {
        return (index>7) ^ cast(bool) ((data>>(index%8)) & 0b1);
    }
    bool opIndexAssign(bool val, size_t index) {
        this.clear(index);
        data |= cast(ubyte) (val<<(index%8));
        return val;
    }
    void flip(size_t index) {
        data ^= cast(ubyte) (0b1<<(index%8));
    }
    void set(size_t index) {
        data |= cast(ubyte) (0b1<<(index%8));
    }
    void clear(size_t index) {
        data &= cast(ubyte) (~(0b1<<(index%8)));
    }
}


immutable ubyte[256] opcodeLen = [
	1, 3, 1, 1, 1, 1, 2, 1,
	3, 1, 1, 1, 1, 1, 2, 1,
	2, 3, 1, 1, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1,
	2, 3, 1, 1, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1,
	2, 3, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 1, 2, 1,
	1, 1, 3, 2, 3, 3, 2, 1,
	1, 1, 3, 0, 3, 1, 2, 1,
	1, 1, 3, 0, 3, 0, 2, 1,
	2, 1, 1, 0, 0, 1, 2, 1,
	2, 1, 3, 0, 0, 0, 2, 1,
	2, 1, 1, 1, 0, 1, 2, 1,
	2, 1, 3, 1, 0, 0, 2, 1
];


immutable ubyte[256][2] opcodeTime = {
    ubyte[256][2] data;
    data[0] = [
        1, 3, 2, 2, 1, 1, 2, 1, 5, 2, 2, 2, 1, 1, 2, 1,
        1, 3, 2, 2, 1, 1, 2, 1, 3, 2, 2, 2, 1, 1, 2, 1,
        2, 3, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1,
        2, 3, 2, 2, 3, 3, 3, 1, 2, 2, 2, 2, 1, 1, 2, 1,
        1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
        2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
        1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
        2, 3, 3, 4, 3, 4, 2, 4, 2, 4, 3, 1, 3, 6, 2, 4,
        2, 3, 3, 0, 3, 4, 2, 4, 2, 4, 3, 0, 3, 0, 2, 4,
        3, 3, 2, 0, 0, 4, 2, 4, 4, 1, 4, 0, 0, 0, 2, 4,
        3, 3, 2, 1, 0, 4, 2, 4, 3, 2, 4, 1, 0, 0, 2, 4
    ];
    data[1][0x20] = 3;
    data[1][0x28] = 3;
    data[1][0x30] = 3;
    data[1][0x38] = 3;
    data[1][0xC0] = 5;
    data[1][0xC2] = 4;
    data[1][0xC4] = 6;
    data[1][0xC8] = 5;
    data[1][0xCA] = 4;
    data[1][0xCC] = 6;
    data[1][0xD0] = 5;
    data[1][0xD2] = 4;
    data[1][0xD4] = 6;
    data[1][0xD8] = 5;
    data[1][0xDA] = 4;
    data[1][0xDC] = 6;
    return data;
}();



immutable ubyte[256] flagSetReset = [
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0100_0100,
    0b0000_0000,
    0b1110_0000,
    0b0000_0000,
    0b0100_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0100_0100,
    0b0000_0000,
    0b1110_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0100_0100,
    0b0000_0000,
    0b1110_0000,
    0b0000_0000,
    0b0100_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0100_0100,
    0b0000_0000,
    0b1110_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0100_0100,
    0b0000_0000,
    0b0010_0000,
    0b0000_0000,
    0b0100_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0100_0100,
    0b0000_0000,
    0b0110_0110,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0100_0100,
    0b0000_0000,
    0b0111_0001,
    0b0000_0000,
    0b0100_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0100_0100,
    0b0000_0000,
    0b0110_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0000,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0111_0010,
    0b0111_0010,
    0b0111_0010,
    0b0111_0010,
    0b0111_0010,
    0b0111_0010,
    0b0111_0010,
    0b0111_0010,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0100_0100,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0100,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0100,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0111_0010,
    0b0000_0000,
    0b1100_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0111_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0111_0000,
    0b0000_0000,
    0b1100_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0100_0100,
    0b0000_0000,
];


immutable ubyte[256] flagSetResetExtra = [
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0111_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0000,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0110_0010,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
    0b0000_0000,
];